#!/usr/bin/ruby

# Grab data from github into the data subdirectory and populate the
# couchbase bucket with the latest commits.

require 'rubygems'
require 'cgi'
require 'dalli'
require 'fileutils'
require 'json'
require 'octokit'
require 'uri'

args = {}
ARGV.each do |arg|
  k, v = arg.split('=')
  args[k] = v or ""
end

orgs = ['couchbase', 'couchbaselabs', 'blevesearch']
orgs = (args['--orgs'] or "").split(',') if args.include?('--orgs')

skip_clone      = args.include?("--skip-clone")      # Whether to 'git clone'.
skip_pull       = args.include?("--skip-pull")       # Whether to 'git pull'.
skip_populate   = args.include?("--skip-populate")   # Whether to populate couchbase.
full_repopulate = args.include?("--full-repopulate") # Whether to do incremental populate.

mc_addr = 'localhost:11211'
mc_addr = args['--mc-addr'] if args.include?('--mc-addr')

# -----------------------------------------------------------------------------

# Clone and pull repositories.

def clone_pull_org(gclient, org, skip_clone, skip_pull)
  print "org: #{org}\n"

  # TODO: What about private repos?
  repos = gclient.repositories(org)
  print "  repos count: #{repos.length}\n"

  repos.each do |repo|
    url = repo[:clone_url] # Ex: "https://github.com/couchbase/sigar.git".
    clone_pull_repo(url, skip_clone, skip_pull)
  end
end

def clone_pull_repo(url, skip_clone, skip_pull)
  dir = "./data/github/#{CGI.escape(url)}"
  if not File.exists?(dir + '/.git') and not skip_clone
    print "  git clone #{url} #{dir}\n"
    %x"git clone #{url} #{dir}"
  end
  if File.exists?(dir + '/.git') and not skip_pull
    print "  cd #{dir} && git pull\n"
    %x"cd #{dir} && git pull"
  end
end

Octokit.auto_paginate = true
gclient = Octokit::Client.new

orgs.each do |org|
  clone_pull_org(gclient, org, skip_clone, skip_pull)
end

# -----------------------------------------------------------------------------

def populate_mc_from_dir(mc, dir, full_repopulate)
  url = CGI.unescape(File.basename(dir)) # Ex: "https://github.com/couchbase/sigar.git".
  print "#{url}\n"

  url_base = url.sub(/\.git$/, '')       # Ex: "https://github.com/couchbase/sigar".
  repo_name = url_base.sub("https://github.com/", "") # Ex: "couchbase/sigar".

  print "cd #{dir} && git log\n"
  lines = %x"cd #{dir} && git log --date-order --format=fuller --parents"

  # The otp repo has some non-UTF-8 chars in it that would otherwise lead
  # to error of "`split': invalid byte sequence in UTF-8 (ArgumentError)".
  commits = lines.force_encoding("iso-8859-1").split(/^commit /)

  i = 0
  commits.each do |commit|
    unless commit.empty?
      key = nil
      doc = { "Type" => "commit", "RepoName" => repo_name }

      hdr, msg = commit.split(/\n\n/)
      fields = hdr.split(/\n/)
      fields.each do |field_val|
        field, val = field_val.split(': ')
        if val
          # TODO: Do we need to reformat dates?
          doc[field] = val.strip
        else
          id, parent_id = field.split(' ')
          key = repo_name + '/' + id
          doc["Key"] = key
          doc["Id"] = id
          doc["URL"] = url_base + '/commit/' + id
          doc["ParentId"] = parent_id if parent_id
        end
      end

      doc["Message"] = msg.strip

      if key
        if full_repopulate
          ok = mc.set(key, doc)
        else
          ok = mc.add(key, doc)
        end
        if not ok
          return commits.length, i, key # Return the key that already exists.
        end

        i = i + 1
      end
    end
  end

  return commits.length, i, nil
end

# For each repository, grab the commit logs and populate into mc.

mc = Dalli::Client.new(mc_addr, :serializer => JSON)

Dir.glob("./data/github/*") do |dir|
  commits_total, commits_added, stopped_on_commit = populate_mc_from_dir(mc, dir, full_repopulate)
  print "  commits_total: #{commits_total}\n"
  print "  commits_added: #{commits_added}\n"
  print "  stopped_on_commit: #{stopped_on_commit}\n"
end
