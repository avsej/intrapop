#!/usr/bin/env ruby

# Grab data from confluence into the data subdirectory and populate the
# couchbase bucket with the latest updates.

require 'cgi'
require 'dalli'
require 'json'
require 'fileutils'
require 'uri'
require 'nokogiri'

args = {}
ARGV.each do |arg|
  k, v = arg.split('=')
  args[k] = v or ""
end

mc_addr = 'localhost:11211'
mc_addr = args['--mc-addr'] if args.include?('--mc-addr')

mc = Dalli::Client.new(mc_addr, :serializer => JSON)

def version(x)
  return 0 if x.nil?
  x.xpath("property[@name='version']").text.to_i
end

def populate_mc(mc, fname, entities_xml)
  print "filename: #{fname}\n"

  m = {} # Instances by class.
  x = Nokogiri::XML(entities_xml)
  objects = x.xpath("//object")
  objects.each do |object|
    c = object['class']
    instances = m[c]
    instances = {} unless instances
    m[c] = instances

    id = object.xpath("property[@name='title']").text
    id = object.xpath("./id[@name='id']").text if id.empty?
    if version(object) >= version(instances[id])
      instances[id] = object
    end
  end

  page_titles = m["Page"].keys.sort
  print "  pages total: #{page_titles.length}\n"
  page_titles.each do |page_title|
    page_x = m["Page"][page_title]
    page_id = page_x.xpath("id[@name='id']").text
    creatorName = page_x.xpath("property[@name='creatorName']").text
    creationDate = page_x.xpath("property[@name='creationDate']").text
    lastModifierName = page_x.xpath("property[@name='lastModifierName']").text
    lastModificationDate = page_x.xpath("property[@name='lastModificationDate']").text
    bodyContentId = page_x.xpath("collection[@name='bodyContents']/element[@class='BodyContent']/id[@name='id']").text
    bodyContent = m["BodyContent"][bodyContentId].xpath("property[@name='body']").text

    key = "confluence/" + page_title
    doc = {
      "Type" => "confluence/page",
      "Key" => key,
      "Title" => page_title,
      "Id" => page_id,
      "CreatorName" => creatorName,
      "CreationDate" => creationDate,
      "LastModifierName" => lastModifierName,
      "LastModificationDate" => lastModificationDate,
      "BodyContent" => bodyContent
    }

    ok = mc.set(key, doc)
    if not ok
      exit "mc.set failed"
    end
  end
end

Dir.glob("./data/confluence/*/entities.xml") do |fname|
  populate_mc(mc, fname, File.read(fname))
end
